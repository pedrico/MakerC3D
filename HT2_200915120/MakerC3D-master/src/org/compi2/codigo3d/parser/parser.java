
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 17 23:45:25 CST 2017
//----------------------------------------------------

package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 17 23:45:25 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\006\002\000\002\002" +
    "\004\000\002\005\005\000\002\005\005\000\002\005\004" +
    "\000\002\005\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\003\000" +
    "\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\016\004\000\005\000\006\000\010\000\014" +
    "\000\020\000\001\002\000\016\004\016\005\014\006\007" +
    "\010\011\014\013\020\017\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\040\002\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\017" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\001\002\000\010\002\uffff\016\022\017\021\001\002\000" +
    "\014\004\016\005\014\006\007\010\011\014\013\001\002" +
    "\000\040\002\ufff4\007\036\010\030\011\032\012\037\013" +
    "\031\015\ufff4\016\ufff4\017\ufff4\021\034\022\033\023\035" +
    "\024\027\025\040\026\041\001\002\000\016\004\016\005" +
    "\014\006\007\010\011\014\013\020\017\001\002\000\040" +
    "\002\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\001\002\000\012\002\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\001\002\000\040\002\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec\017\uffec\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\001\002" +
    "\000\016\004\016\005\014\006\007\010\011\014\013\020" +
    "\017\001\002\000\012\002\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\001\002\000\016\004\016\005\014\006\007\010\011\014" +
    "\013\020\017\001\002\000\016\004\016\005\014\006\007" +
    "\010\011\014\013\020\017\001\002\000\012\002\ufffe\015" +
    "\ufffe\016\ufffe\017\021\001\002\000\012\002\ufffd\015\ufffd" +
    "\016\ufffd\017\ufffd\001\002\000\010\015\026\016\022\017" +
    "\021\001\002\000\040\002\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\026\uffed\001\002\000\014" +
    "\004\016\005\014\006\007\010\011\014\013\001\002\000" +
    "\014\004\016\005\014\006\007\010\011\014\013\001\002" +
    "\000\014\004\016\005\014\006\007\010\011\014\013\001" +
    "\002\000\014\004\016\005\014\006\007\010\011\014\013" +
    "\001\002\000\014\004\016\005\014\006\007\010\011\014" +
    "\013\001\002\000\014\004\016\005\014\006\007\010\011" +
    "\014\013\001\002\000\014\004\016\005\014\006\007\010" +
    "\011\014\013\001\002\000\014\004\016\005\014\006\007" +
    "\010\011\014\013\001\002\000\014\004\016\005\014\006" +
    "\007\010\011\014\013\001\002\000\014\004\016\005\014" +
    "\006\007\010\011\014\013\001\002\000\014\004\016\005" +
    "\014\006\007\010\011\014\013\001\002\000\024\002\ufff5" +
    "\007\036\010\030\011\032\012\037\013\031\015\ufff5\016" +
    "\ufff5\017\ufff5\001\002\000\024\002\ufff6\007\036\010\030" +
    "\011\032\012\037\013\031\015\ufff6\016\ufff6\017\ufff6\001" +
    "\002\000\040\002\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\031\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\001\002\000\040\002\ufff3" +
    "\007\ufff3\010\ufff3\011\032\012\037\013\031\015\ufff3\016" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\001\002\000\024\002\ufff8\007\036\010\030\011" +
    "\032\012\037\013\031\015\ufff8\016\ufff8\017\ufff8\001\002" +
    "\000\024\002\ufffa\007\036\010\030\011\032\012\037\013" +
    "\031\015\ufffa\016\ufffa\017\ufffa\001\002\000\024\002\ufff9" +
    "\007\036\010\030\011\032\012\037\013\031\015\ufff9\016" +
    "\ufff9\017\ufff9\001\002\000\040\002\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\031\015\ufff1\016\ufff1\017\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\001\002" +
    "\000\040\002\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\031\015\uffef\016\uffef\017\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\001\002\000\040\002\ufff2\007" +
    "\ufff2\010\ufff2\011\032\012\037\013\031\015\ufff2\016\ufff2" +
    "\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\001\002\000\024\002\ufff7\007\036\010\030\011\032" +
    "\012\037\013\031\015\ufff7\016\ufff7\017\ufff7\001\002\000" +
    "\040\002\uffee\007\uffee\010\uffee\011\032\012\037\013\031" +
    "\015\uffee\016\uffee\017\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\026\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\006\002\004\006\003\001\001\000\010\003" +
    "\011\004\014\005\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\054\001\001\000\002\001\001\000\010\003\011\004\014" +
    "\005\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\011\004\014\005\017\001\001" +
    "\000\002\001\001\000\010\003\011\004\014\005\023\001" +
    "\001\000\010\003\011\004\014\005\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\053\001\001\000\004\003\052\001\001" +
    "\000\004\003\051\001\001\000\004\003\050\001\001\000" +
    "\004\003\047\001\001\000\004\003\046\001\001\000\004" +
    "\003\045\001\001\000\004\003\044\001\001\000\004\003" +
    "\043\001\001\000\004\003\042\001\001\000\004\003\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
      

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARITMETICA ::= DECIMAL 
            {
              NodoC3D RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoC3D(decimal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARITMETICA ::= ENTERO 
            {
              NodoC3D RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoC3D(entero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARITMETICA ::= ID 
            {
              NodoC3D RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoC3D(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARITMETICA ::= PAR_IZQ LOGICO PAR_DER 
            {
              NodoC3D RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARITMETICA ::= MENOS ARITMETICA 
            {
              NodoC3D RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        RESULT.C3D = exp.C3D + c3d;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARITMETICA ::= ARITMETICA POT ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARITMETICA ::= ARITMETICA DIV ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARITMETICA ::= ARITMETICA MULT ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;           
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARITMETICA ::= ARITMETICA MENOS ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARITMETICA ::= ARITMETICA MAS ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                         
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RELACIONAL ::= ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = izq;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RELACIONAL ::= ARITMETICA DISTINTO ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " != " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;                      
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RELACIONAL ::= ARITMETICA IGUALIGUAL ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " == " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RELACIONAL ::= ARITMETICA MENORIGUAL ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " <= " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RELACIONAL ::= ARITMETICA MAYORIGUAL ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " >= " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RELACIONAL ::= ARITMETICA MENORQUE ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " < " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RELACIONAL ::= ARITMETICA MAYORQUE ARITMETICA 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                        
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " > " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LOGICO ::= RELACIONAL 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                         
                        RESULT = izq; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LOGICO ::= NOT LOGICO 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoC3D();                        
                        String c3d = izq.C3D;
                        RESULT.C3D = c3d;
                        RESULT.setEtiV(izq.getEtiF());
                        RESULT.setEtiF(izq.getEtiV());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LOGICO ::= LOGICO AND LOGICO 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         
                        RESULT = new NodoC3D();                        
                        String c3d = izq.C3D + "\n"+ izq.getEtiV() + ":\n" + der.C3D;
                        RESULT.C3D = c3d;
                        RESULT.setEtiV(der.getEtiV());
                        RESULT.setEtiF(izq.getEtiF() + " " + der.getEtiF());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LOGICO ::= LOGICO OR LOGICO 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                        
                        RESULT = new NodoC3D();                        
                        String c3d = izq.C3D + "\n"+ izq.getEtiF() + ":\n" + der.C3D;
                        RESULT.C3D = c3d;
                        RESULT.setEtiV(izq.getEtiV() + " " + der.getEtiV());
                        RESULT.setEtiF(der.getEtiF());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGICO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicial ::= NT$0 LOGICO 
            {
              NodoC3D RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoC3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = exp;
                        ControlC3D.agregarC3D(RESULT.C3D + "\n//Etiquetas Verdaderas: " + exp.getEtiV() +"\n//Etiquetas Falsas: "+exp.getEtiF());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              NodoC3D RESULT =null;
 ControlC3D.reiniciar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D start_val = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

