package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER ;
terminal OR, AND, NOT, MAYORQUE, MENORQUE, MAYORIGUAL, MENORIGUAL, IGUALIGUAL, DISTINTO;
nonterminal NodoC3D inicial, ARITMETICA, RELACIONAL, LOGICO;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MAYORQUE, MENORQUE, MAYORIGUAL, MENORIGUAL, IGUALIGUAL, DISTINTO;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} LOGICO:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D(RESULT.C3D + "\n//Etiquetas Verdaderas: " + exp.getEtiV() +"\n//Etiquetas Falsas: "+exp.getEtiF());
                    :};

LOGICO      ::= LOGICO:izq OR LOGICO:der
                    {:                        
                        RESULT = new NodoC3D();                        
                        String c3d = izq.C3D + "\n"+ izq.getEtiF() + ":\n" + der.C3D;
                        RESULT.C3D = c3d;
                        RESULT.setEtiV(izq.getEtiV() + " " + der.getEtiV());
                        RESULT.setEtiF(der.getEtiF());
                    :}

                    | LOGICO:izq AND LOGICO:der
                    {:
                         
                        RESULT = new NodoC3D();                        
                        String c3d = izq.C3D + "\n"+ izq.getEtiV() + ":\n" + der.C3D;
                        RESULT.C3D = c3d;
                        RESULT.setEtiV(der.getEtiV());
                        RESULT.setEtiF(izq.getEtiF() + " " + der.getEtiF());
                    :}

                    | NOT LOGICO:izq 
                    {:
                        RESULT = new NodoC3D();                        
                        String c3d = izq.C3D;
                        RESULT.C3D = c3d;
                        RESULT.setEtiV(izq.getEtiF());
                        RESULT.setEtiF(izq.getEtiV());
                    :}
                    
                    | RELACIONAL:izq
                    {:                         
                        RESULT = izq; 
                    :}
;

RELACIONAL      ::=ARITMETICA:izq MAYORQUE ARITMETICA:der
                    {:                        
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " > " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    :}

                    | ARITMETICA:izq MENORQUE ARITMETICA:der
                    {:
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " < " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    :}

                    |ARITMETICA:izq MAYORIGUAL ARITMETICA:der
                    {:
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " >= " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    :}

                    |ARITMETICA:izq MENORIGUAL ARITMETICA:der
                    {:
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " <= " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    :}

                    |ARITMETICA:izq IGUALIGUAL ARITMETICA:der
                    {:
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " == " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                    :}

                    |ARITMETICA:izq DISTINTO ARITMETICA:der
                    {:
                        RESULT = new NodoC3D(); 
                        RESULT.setEtiV(ControlC3D.generarEti());
                        RESULT.setEtiF(ControlC3D.generarEti());
                        String c3d = "if " + izq.getCad() + " != " + der.getCad() + " goto " + RESULT.getEtiV() + ";\n"
                                    + "goto " +  RESULT.getEtiF() + ";";                        
                        RESULT.C3D = izq.C3D + der.C3D + c3d;                      
                    :}
                    | ARITMETICA:izq 
                    {:
                         RESULT = izq;
                    :}
;

ARITMETICA   ::= ARITMETICA:izq MAS ARITMETICA:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                         
                    :}
            |   ARITMETICA:izq MENOS ARITMETICA:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    :}
            |   ARITMETICA:izq MULT ARITMETICA:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;           
                    :}
            |   ARITMETICA:izq DIV ARITMETICA:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    :}
            |   ARITMETICA:izq POT ARITMETICA:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        RESULT.C3D = izq.C3D + der.C3D + c3d;
                        
                    :}
            |   MENOS ARITMETICA:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        RESULT = new NodoC3D(temp);
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        RESULT.C3D = exp.C3D + c3d;
                        
                    :}
            |   PAR_IZQ LOGICO:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
;